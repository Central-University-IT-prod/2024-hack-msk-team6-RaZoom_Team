services:
  backend:
    build: ./backend
    container_name: prod_backend
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - backend_data:/app/data
  
  postgres:
    image: postgres:alpine
    container_name: prod_db
    command: -c 'max_connections=1000'
    volumes:
      - pgdata:/var/lib/postgresql/data/
    expose:
      - 5432
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: Europe/Moscow
      PGTZ: Europe/Moscow
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: prod_frontend
    restart: unless-stopped
    depends_on:
      - backend

  nginx:
    image: nginx:alpine
    container_name: prod_nginx
    restart: unless-stopped
    ports:
      - 127.0.0.1:8001:80
    volumes:
      - type: bind
        source: ./nginx.conf
        target: /etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend

volumes:
  backend_data:
  pgdata: